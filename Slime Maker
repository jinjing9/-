<!doctype html>
<html lang="ko">
<head>
<meta charset="utf-8" />
<meta name="viewport" content="width=device-width,initial-scale=1" />
<title>Slime Maker</title>

<link rel="preconnect" href="https://fonts.googleapis.com">
<link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
<link href="https://fonts.googleapis.com/css2?family=Noto+Sans+KR:wght@400;600;800&display=swap" rel="stylesheet">

<style>
:root{
  --ink:#2c2c2c;
  --panel:#ffffff;
  --line:#e6e6e6;
  --accent:#a1bd9b;      /* 포인트 컬러 */
  --muted:#b9bfc6;       /* 음수/보조 */
  --shadow:0 10px 26px rgba(0,0,0,.08);
  --radius:14px;
}

/* 어두운 체크무늬 배경 (무채색) */
html,body{height:100%}
*{box-sizing:border-box}
body{
  margin:0;
  background:
    radial-gradient(900px 600px at -15% -20%, rgba(255,255,255,.03) 0%, transparent 60%),
    radial-gradient(900px 600px at 115% 0%, rgba(255,255,255,.03) 0%, transparent 55%),
    repeating-linear-gradient(45deg, #1d1d1d 0 12px, #222 12px 24px);
  color:var(--ink);
  font-family:'Noto Sans KR', system-ui, -apple-system, Segoe UI, sans-serif;
}

/* Header */
.header{
  position:sticky; top:0; z-index:5;
  background:linear-gradient(180deg, rgba(0,0,0,.65), rgba(0,0,0,.5));
  border-bottom:1px solid rgba(255,255,255,.06);
  color:#fff;
}
.header-inner{
  max-width:1100px; margin:0 auto; padding:14px 16px;
  display:flex; align-items:flex-end; justify-content:space-between; gap:12px;
}
.h-title{margin:0; font-size:24px; font-weight:800; letter-spacing:.2px}
.h-meta{display:flex; gap:10px; flex-wrap:wrap}
.chip{
  background:#2a2a2a; color:#fff; border:1px solid rgba(255,255,255,.08);
  border-radius:999px; padding:8px 12px; box-shadow:0 6px 18px rgba(0,0,0,.35); font-weight:700;
}

/* Layout */
.container{
  max-width:1100px; margin:18px auto 60px; padding:0 16px;
  display:grid; grid-template-columns:1.3fr 1fr; gap:18px;
}
@media (max-width:980px){.container{grid-template-columns:1fr}}

.card{
  background:var(--panel); border:1px solid var(--line);
  border-radius:var(--radius); box-shadow:var(--shadow); padding:16px;
}
.card h2{margin:0 0 12px; font-size:18px; color:#1f1f1f}

/* Stage */
.stage{display:grid; grid-template-rows:auto auto 1fr; gap:14px}
.canvas{
  display:flex; align-items:center; justify-content:center;
  background:linear-gradient(180deg,#fff,#f8f8f8); border:1px solid var(--line);
  border-radius:18px; min-height:320px; position:relative;
}
#slimeImg{width:min(420px, 84vw); height:auto; display:block; user-select:none}
.toast{
  position:absolute; left:50%; top:14px; transform:translateX(-50%);
  background:rgba(0,0,0,.75); color:#fff; padding:8px 12px; border-radius:10px;
  border:1px solid rgba(0,0,0,.25); display:none; max-width:calc(100% - 28px);
  text-align:center; line-height:1.35;
}

/* Actions */
.actions{display:grid; grid-template-columns:repeat(5,1fr); gap:10px}
@media (max-width:860px){.actions{grid-template-columns:repeat(3,1fr)}}
.btn{
  appearance:none; border:none; cursor:pointer;
  background:#fff; border:1px solid var(--line);
  padding:12px 12px; border-radius:10px; font-weight:700; color:#2c2c2c;
  transition:transform .05s ease, filter .15s ease; box-shadow:var(--shadow);
}
.btn:hover{filter:brightness(1.03)}
.btn:active{transform:translateY(1px)}
.btn[disabled]{opacity:.5; cursor:not-allowed}
.btn-primary{background:var(--accent); color:#0f2b1f; border-color:#93b28e}

/* Controls */
.controls{display:flex; gap:10px; flex-wrap:wrap}
.controls .btn{min-width:120px}

/* Status & Log */
.stat-row{display:grid; grid-template-columns:92px 1fr 72px; align-items:center; gap:10px; margin-bottom:10px}
.stat-label{font-size:13px; color:#5b5b5b}

/* 듀얼바: 중앙 0, 좌(−)=무채색 / 우(+)=포인트 단색 */
.dual{
  height:14px; background:#ededed; border:1px solid #e3e3e3; border-radius:999px; position:relative; overflow:hidden
}
.dual .mid{position:absolute; left:50%; top:0; bottom:0; width:1px; background:#d8d8d8}
.dual .neg{position:absolute; right:50%; top:0; bottom:0; width:0; background:var(--muted)}
.dual .pos{position:absolute; left:50%; top:0; bottom:0; width:0; background:var(--accent)}
.stat-val{text-align:right; font-size:13px; color:#4a4a4a}

.log-wrap{margin-top:12px}
.log-title{margin:10px 0 8px; font-weight:700; color:#2b2b2b}
.log{min-height:80px; max-height:220px; overflow:auto; border:1px dashed #e0e0e0; border-radius:12px; padding:10px; background:#fafafa}
.log p{margin:0 0 8px; font-size:14px}

/* Image animations */
@keyframes jump{0%{transform:translateY(0)}40%{transform:translateY(-14px)}100%{transform:translateY(0)}}
@keyframes flash{0%,100%{opacity:1}50%{opacity:.25}}
@keyframes shake{10%,90%{transform:translateX(-2px)}20%,80%{transform:translateX(3px)}30%,50%,70%{transform:translateX(-6px)}40%,60%{transform:translateX(6px)}}
@keyframes tilt{0%{transform:rotate(0)}50%{transform:rotate(-4deg)}100%{transform:rotate(0)}}
@keyframes breathe{0%{transform:translateY(0)}50%{transform:translateY(-6px)}100%{transform:translateY(0)}}
.anim-jump{animation:jump .45s ease}
.anim-flash{animation:flash .45s ease}
.anim-shake{animation:shake .45s ease-in-out}
.anim-tilt{animation:tilt .45s ease}
.anim-breathe{animation:breathe .7s ease}

/* Modals (Ending / Event 공통) */
.modal{position:fixed; inset:0; background:rgba(0,0,0,.45); display:none; align-items:center; justify-content:center; padding:20px; z-index:10}
.modal.active{display:flex}
.modal-card{width:min(620px,94vw); background:var(--panel); border:1px solid var(--line); border-radius:14px; box-shadow:var(--shadow); padding:20px}
.modal-card h3{margin:0 0 8px; font-size:20px; color:#1f1f1f}
.modal-card p{margin:8px 0 16px; color:#4a4a4a}
.modal-actions{display:flex; gap:10px; justify-content:flex-end; margin-top:10px}
#endingImg{display:block; max-width:280px; height:auto; margin:8px auto 0}
</style>
</head>
<body>

<header class="header">
  <div class="header-inner">
    <h1 class="h-title">Slime Maker</h1>
    <div class="h-meta">
      <div class="chip">Day <b id="hudDay">1</b> / 30</div>
      <div class="chip">Actions <b id="hudAct">0</b> / 3</div>
    </div>
  </div>
</header>

<main class="container">
  <!-- LEFT: Stage -->
  <section class="card stage">
    <h2>Stage</h2>
    <div class="canvas">
      <img id="slimeImg" alt="slime"/>
      <div class="toast" id="toast"></div>
    </div>

    <div class="card" style="padding:14px">
      <h2 style="margin-bottom:10px">Actions</h2>
      <div class="actions">
        <button class="btn" data-act="운동">운동</button>
        <button class="btn" data-act="유니티">유니티</button>
        <button class="btn" data-act="일">일</button>
        <button class="btn" data-act="독서">독서</button>
        <button class="btn" data-act="VRC">VRC</button>
      </div>
      <div class="controls" style="margin-top:12px">
        <button class="btn btn-primary" id="nextBtn">다음 날 ▶</button>
        <button class="btn" id="resetDayBtn">다시하기</button>
        <button class="btn" id="resetAllBtn">처음부터</button>
      </div>
    </div>
  </section>

  <!-- RIGHT: Status & Log -->
  <aside class="card">
    <h2>Status</h2>

    <!-- 듀얼바 5종 -->
    <div class="stat-row">
      <div class="stat-label">체력</div>
      <div class="dual"><span class="mid"></span><span class="neg" id="neg-hp"></span><span class="pos" id="pos-hp"></span></div>
      <div class="stat-val" id="val-hp">0</div>
    </div>
    <div class="stat-row">
      <div class="stat-label">지능</div>
      <div class="dual"><span class="mid"></span><span class="neg" id="neg-iq"></span><span class="pos" id="pos-iq"></span></div>
      <div class="stat-val" id="val-iq">0</div>
    </div>
    <div class="stat-row">
      <div class="stat-label">매력</div>
      <div class="dual"><span class="mid"></span><span class="neg" id="neg-charm"></span><span class="pos" id="pos-charm"></span></div>
      <div class="stat-val" id="val-charm">0</div>
    </div>
    <div class="stat-row">
      <div class="stat-label">재력</div>
      <div class="dual"><span class="mid"></span><span class="neg" id="neg-wealth"></span><span class="pos" id="pos-wealth"></span></div>
      <div class="stat-val" id="val-wealth">0</div>
    </div>
    <div class="stat-row">
      <div class="stat-label">스트레스</div>
      <div class="dual"><span class="mid"></span><span class="neg" id="neg-stress"></span><span class="pos" id="pos-stress"></span></div>
      <div class="stat-val" id="val-stress">0</div>
    </div>

    <div class="log-wrap">
      <div class="log-title">Log</div>
      <div class="log" id="log"></div>
    </div>
  </aside>
</main>

<!-- Ending Modal -->
<div class="modal" id="endingModal" role="dialog" aria-modal="true">
  <div class="modal-card">
    <h3 id="endingTitle">엔딩</h3>
    <img id="endingImg" alt="ending image" />
    <p id="endingDesc">설명</p>
    <div class="modal-actions">
      <button class="btn" id="closeEnding">닫기</button>
      <button class="btn btn-primary" id="restartAllFromEnding">처음부터</button>
    </div>
  </div>
</div>

<!-- Event Modal -->
<div class="modal" id="eventModal" role="dialog" aria-modal="true">
  <div class="modal-card">
    <h3 id="eventTitle">이벤트</h3>
    <p id="eventText"></p>
    <div class="modal-actions">
      <button class="btn" id="eventA">선택 A</button>
      <button class="btn btn-primary" id="eventB">선택 B</button>
    </div>
  </div>
</div>

<script>
/* =========================
   이미지 매핑 (제공 링크)
========================= */
const SLIME_IMG = {
    기본: "https://github.com/jinjing9/-/blob/main/basic.png?raw=true",
  청혜령: "https://github.com/jinjing9/-/blob/main/cheonghyeryeong.png?raw=true",
  에티켓: "https://github.com/jinjing9/-/blob/main/etiquette.png?raw=true",
  홍민택: "https://github.com/jinjing9/-/blob/main/hongmintaek.png?raw=true",
  아이스본: "https://github.com/jinjing9/-/blob/main/iceborn.png?raw=true",
  진징구: "https://github.com/jinjing9/-/blob/main/jinjingoo.png?raw=true",
};

/* --- (신규) 프리로드: 엔딩 이미지 미리 로드해서 모달 때 빠르게 표시 --- */
const PRELOADED = {};
for (const [k, src] of Object.entries(SLIME_IMG)) {
  const im = new Image();
  im.src = src;
  PRELOADED[k] = im;
}

/* =========================
   요소
========================= */
const HUD_DAY = document.getElementById('hudDay');
const HUD_ACT = document.getElementById('hudAct');

const neg = {
  체력: document.getElementById('neg-hp'),
  지능: document.getElementById('neg-iq'),
  매력: document.getElementById('neg-charm'),
  재력: document.getElementById('neg-wealth'),
  스트레스: document.getElementById('neg-stress')
};
const pos = {
  체력: document.getElementById('pos-hp'),
  지능: document.getElementById('pos-iq'),
  매력: document.getElementById('pos-charm'),
  재력: document.getElementById('pos-wealth'),
  스트레스: document.getElementById('pos-stress')
};
const vals = {
  체력: document.getElementById('val-hp'),
  지능: document.getElementById('val-iq'),
  매력: document.getElementById('val-charm'),
  재력: document.getElementById('val-wealth'),
  스트레스: document.getElementById('val-stress')
};

const img = document.getElementById('slimeImg');
const toast = document.getElementById('toast');
const logEl = document.getElementById('log');

const nextBtn = document.getElementById('nextBtn');
const resetDayBtn = document.getElementById('resetDayBtn');
const resetAllBtn = document.getElementById('resetAllBtn');

const endingModal = document.getElementById('endingModal');
const endingTitle = document.getElementById('endingTitle');
const endingDesc  = document.getElementById('endingDesc');
const endingImg   = document.getElementById('endingImg');
const closeEnding = document.getElementById('closeEnding');
const restartAllFromEnding = document.getElementById('restartAllFromEnding');

const eventModal = document.getElementById('eventModal');
const eventTitle = document.getElementById('eventTitle');
const eventText  = document.getElementById('eventText');
const eventA     = document.getElementById('eventA');
const eventB     = document.getElementById('eventB');

/* =========================
   상태
========================= */
let stats, day, actionsTaken, chosenActs;
let dayStartSnapshot = null; // 하루 리셋용

/* =========================
   규칙 (−100~100 스케일)
========================= */
// 행동 기본 변화량 (중립 0 기준, 델타값)
const ACTION_EFF = {
  운동:   { 체력:+8,  지능:-3, 매력: 0,  재력: 0,  스트레스:-2,  anim:'anim-jump' },
  유니티: { 체력:-4, 지능:-5, 매력:+10, 재력:-8, 스트레스:+8,   anim:'anim-flash' },
  일:     { 체력:-5, 지능: 0,  매력:-3,  재력:+12, 스트레스:+8,   anim:'anim-shake' },
  독서:   { 체력:-2, 지능:+10, 매력: 0,  재력: 0,  스트레스:-2,  anim:'anim-tilt' },
  VRC:    { 체력:+6,  지능: 0,  매력:-1,  재력: 0,  스트레스:-12, anim:'anim-breathe' }
};
// 행동 내러티브
const ACTION_TEXT = {
  운동:'땀 흘리며 운동했다!',
  유니티:'유니티로 아바타를 만지작… 예뻐졌다',
  일:'죽어라 일해서 돈을 벌었다',
  독서:'책을 읽으며 지식이 늘었다',
  VRC:'VRC에서 힐링했다'
};

// 반복 페널티: 같은 날 2번째 ×0.6, 3번째 ×0.3
function repeatFactor(n){ return n===1?1 : n===2?0.6 : 0.3; }

// 소프트 캡: 0에서 멀어지는 방향이면 감쇠 (|val| 커질수록 ↓)
function soften(val, delta){
  const away = (val>0 && delta>0) || (val<0 && delta<0);
  if(!away) return delta; // 0 쪽으로 가는 변화는 그대로
  const a = Math.abs(val);
  let f = 1;
  if(a>=90) f = 0.25;
  else if(a>=80) f = 0.45;
  else if(a>=60) f = 0.7;
  return Math.round(delta * f);
}

// 자연 복귀: 하루 끝나고 0을 향해 1pt (가끔 2pt)
function driftTowardZero(v){
  if(v===0) return 0;
  const step = Math.random()<0.15?2:1;
  return v>0 ? v-step : v+step;
}

const clamp = v => Math.max(-100, Math.min(100, v));
// 작은 지터 (±10%)
const jitter = v => Math.round(v * (1 + (Math.random()*0.2 - 0.1)));

/* =========================
   렌더 (듀얼바)
========================= */
function renderBars(){
  for(const k of Object.keys(vals)){
    const v = stats[k];
    const posW = Math.max(0, v)/2;   // +100 -> 50%
    const negW = Math.max(0,-v)/2;   // -100 -> 50%
    pos[k].style.width = posW + '%';
    neg[k].style.width = negW + '%';
    vals[k].textContent = (v>0?'+':'') + v;
  }
  HUD_DAY.textContent = day;
  HUD_ACT.textContent = actionsTaken;
}
function setSlimeImage(key='기본'){ img.src = SLIME_IMG[key] || SLIME_IMG.기본; }

/* =========================
   초기화 & 하루 스냅샷
========================= */
function markDayStart(){
  dayStartSnapshot = { stats: {...stats}, imageSrc: img.src };
}
function resetAll(){ // 완전 초기화
  stats = { 체력:0, 지능:0, 매력:0, 재력:0, 스트레스:0 };
  day = 1; actionsTaken = 0; chosenActs = [];
  setSlimeImage('기본');
  logEl.innerHTML = '';
  markDayStart();
  enableActions(true);
  renderBars();
}
function resetDay(){ // 하루 리셋
  if(!dayStartSnapshot) return;
  stats = {...dayStartSnapshot.stats};
  img.src = dayStartSnapshot.imageSrc || SLIME_IMG.기본;
  actionsTaken = 0; chosenActs = [];
  logEl.innerHTML = '';
  enableActions(true);
  renderBars();
}

/* =========================
   행동
========================= */
function showToast(text){
  toast.textContent = text;
  toast.style.display = 'block';
  clearTimeout(showToast._t);
  showToast._t = setTimeout(()=> toast.style.display='none', 1100);
}
function animateSlime(cls){
  img.classList.remove('anim-jump','anim-flash','anim-shake','anim-tilt','anim-breathe');
  void img.offsetWidth; img.classList.add(cls);
}
function enableActions(on){ document.querySelectorAll('[data-act]').forEach(b=> b.disabled = !on); }

document.querySelectorAll('[data-act]').forEach(btn=>{
  btn.addEventListener('click', ()=>{
    if(actionsTaken>=3) return;
    const act = btn.dataset.act;
    chosenActs.push(act);
    actionsTaken++;

    // 로그 (내러티브)
    const p = document.createElement('p');
    p.textContent = ACTION_TEXT[act] || act;
    logEl.appendChild(p); logEl.scrollTop = logEl.scrollHeight;

    animateSlime(ACTION_EFF[act].anim);
    showToast(ACTION_TEXT[act]);

    if(actionsTaken>=3) enableActions(false);
    renderBars();
  });
});

/* =========================
   하루 종료: 합산 적용 (반복 페널티 개선)
========================= */
function applyDayChanges(){
  const add = { 체력:0, 지능:0, 매력:0, 재력:0, 스트레스:0 };
  const usedCount = {}; // 행동별 누적 카운트

  for(const act of chosenActs){
    usedCount[act] = (usedCount[act]||0) + 1; // 이번 적용이 몇 번째인지
    const eff = ACTION_EFF[act];
    const r = repeatFactor(usedCount[act]);

    for(const k of Object.keys(add)){
      if(eff[k]===undefined) continue;
      const base = eff[k];
      const delta = jitter(Math.round(base * r));
      add[k] += soften(stats[k], delta);
    }
  }

  // 적용
  for(const k of Object.keys(stats)){
    stats[k] = clamp(stats[k] + add[k]);
  }
  // 자연 복귀(0쪽으로 1pt, 가끔 2pt)
  for(const k of Object.keys(stats)){
    stats[k] = clamp(driftTowardZero(stats[k]));
  }

  // 다음날 준비(하루 로그는 비움)
  chosenActs = []; actionsTaken = 0; enableActions(true);
  renderBars();
  logEl.innerHTML = '';
}

/* =========================
   이벤트: 스탯별 조건 + 팝업 선택
========================= */
// 이벤트 정의(스탯당 1개, 조건 충족 시 후보)
const EVENTS = [
  {
    key:'hpLow',
    cond:(s)=> s.체력 <= -60,
    title:'기절 직전',
    text:'몸이 휘청거린다. 병원에 갈까?',
    a:{ label:'병원 간다', eff:{체력:+20, 재력:-15, 스트레스:-5} },
    b:{ label:'그냥 쉰다', eff:{체력:+8,  스트레스:+5} }
  },
  {
    key:'iqHigh',
    cond:(s)=> s.지능 >= +60,
    title:'머리 과열',
    text:'너무 많은 걸 알아버렸다.',
    a:{ label:'심호흡',     eff:{지능:-8,  스트레스:-6} },
    b:{ label:'더 파고든다', eff:{지능:+4,  스트레스:+10} }
  },
  {
    key:'charmHigh',
    cond:(s)=> s.매력 >= +70,
    title:'즉석 요청',
    text:'사람들이 사진을 요청한다.',
    a:{ label:'사진 찍어준다', eff:{매력:+5, 체력:-4, 스트레스:+5} },
    b:{ label:'정중히 거절',   eff:{매력:-6, 스트레스:-4} }
  },
  {
    key:'wealthHigh',
    cond:(s)=> s.재력 >= +70,
    title:'한턱 쏘기',
    text:'오늘은 한턱 쏠까?',
    a:{ label:'한턱 쏜다', eff:{재력:-15, 매력:+10, 스트레스:+5} },
    b:{ label:'모른 척한다', eff:{스트레스:-5} }
  },
  {
    key:'stressHigh',
    cond:(s)=> s.스트레스 >= +70,
    title:'폭발 직전',
    text:'감정이 폭발하기 직전이다.',
    a:{ label:'운동으로 풀기', eff:{스트레스:-15, 체력:-5} },
    b:{ label:'꾹 참는다',     eff:{스트레스:-5,  지능:-3} }
  }
];

function maybePickEvent(){
  const eligible = EVENTS.filter(e=> e.cond(stats));
  if(!eligible.length) return null;
  // 조건 만족해도 매일 뜨지 않도록 확률 게이트
  if(Math.random() < 0.35){
    return eligible[Math.floor(Math.random()*eligible.length)];
  }
  return null;
}

function applyEffects(eff){
  for(const [k,delta] of Object.entries(eff)){
    stats[k] = clamp(stats[k] + delta);
  }
  renderBars();
}
function openEvent(ev, done){
  eventTitle.textContent = ev.title;
  eventText.textContent  = ev.text;
  eventA.textContent = ev.a.label;
  eventB.textContent = ev.b.label;

  eventA.onclick = ()=>{ applyEffects(ev.a.eff); eventModal.classList.remove('active'); done(); };
  eventB.onclick = ()=>{ applyEffects(ev.b.eff); eventModal.classList.remove('active'); done(); };

  eventModal.classList.add('active');
}

/* =========================
   엔딩 힌트 (Day 26 진입)
========================= */
const HINT_TEXT = {
  '아이스본': '나쁘지 않은데요?',
  '청혜령':   '저도 보는 눈이 있어요...',
  '에티캣':   '놀자.',
  '홍민택':   '으흐흐...',
  '진징구':   '크아아아악',
  '평범':     '아직 특별한 기운이 느껴지지 않아요.'
};
function guessEnding(s){
  // 간단 스코어: 조건 충족 +2, 근접(10p) +1
  const scores = {'아이스본':0,'청혜령':0,'에티캣':0,'홍민택':0,'진징구':0};
  const near=(need,cur)=> Math.abs(need-cur)<=10;

  // 아이스본: 지능≥+30, 매력≥+20, 재력≥+25, 체력≥+15, 스트레스≤−20
  if(s.지능>=30) scores['아이스본']+=2; else if(near(30,s.지능)) scores['아이스본']++;
  if(s.매력>=20) scores['아이스본']+=2; else if(near(20,s.매력)) scores['아이스본']++;
  if(s.재력>=25) scores['아이스본']+=2; else if(near(25,s.재력)) scores['아이스본']++;
  if(s.체력>=15) scores['아이스본']+=2; else if(near(15,s.체력)) scores['아이스본']++;
  if(s.스트레스<=-20) scores['아이스본']+=2; else if(near(-20,s.스트레스)) scores['아이스본']++;

  // 청혜령: 체력≥+35, 재력≥+20, 지능≥+10, 스트레스≤0
  if(s.체력>=35) scores['청혜령']+=2; else if(near(35,s.체력)) scores['청혜령']++;
  if(s.재력>=20) scores['청혜령']+=2; else if(near(20,s.재력)) scores['청혜령']++;
  if(s.지능>=10) scores['청혜령']+=2; else if(near(10,s.지능)) scores['청혜령']++;
  if(s.스트레스<=0) scores['청혜령']+=2; else if(near(0,s.스트레스)) scores['청혜령']++;

  // 에티캣: 체력≥+10, 지능≥+10, 재력≤0, 스트레스≤+5
  if(s.체력>=10) scores['에티캣']+=2; else if(near(10,s.체력)) scores['에티캣']++;
  if(s.지능>=10) scores['에티캣']+=2; else if(near(10,s.지능)) scores['에티캣']++;
  if(s.재력<=0) scores['에티캣']+=2; else if(near(0,s.재력)) scores['에티캣']++;
  if(s.스트레스<=5) scores['에티캣']+=2; else if(near(5,s.스트레스)) scores['에티캣']++;

  // 홍민택: 재력≥+20, 지능≥+20, 스트레스≥+15
  if(s.재력>=20) scores['홍민택']+=2; else if(near(20,s.재력)) scores['홍민택']++;
  if(s.지능>=20) scores['홍민택']+=2; else if(near(20,s.지능)) scores['홍민택']++;
  if(s.스트레스>=15) scores['홍민택']+=2; else if(near(15,s.스트레스)) scores['홍민택']++;

  // 진징구: 재력≥+15, 매력≥+10, 지능≤−10, 체력≤−20
  if(s.재력>=15) scores['진징구']+=2; else if(near(15,s.재력)) scores['진징구']++;
  if(s.매력>=10) scores['진징구']+=2; else if(near(10,s.매력)) scores['진징구']++;
  if(s.지능<=-10) scores['진징구']+=2; else if(near(-10,s.지능)) scores['진징구']++;
  if(s.체력<=-20) scores['진징구']+=2; else if(near(-20,s.체력)) scores['진징구']++;

  let best='평범', bestScore=-1;
  for(const [k,v] of Object.entries(scores)){ if(v>bestScore){ best=k; bestScore=v; } }
  return best;
}

/* =========================
   엔딩 판정
========================= */
const EXTREME_TEXT = {
  hi:{체력:'단단해져 굳어버렸다...!', 지능:'너무 많은걸 알아버렸어.', 매력:'나는 이제 누굴 사랑해야하지?', 재력:'돈이 전부는 아닐거에요', 스트레스:'이럴 바엔 죽고말겠어'},
  lo:{체력:'숨 쉬는 것도 힘든데ㅇ..ㅛ..?', 지능:'숨 쉬는 법을 잊어버렸ㅇ...', 매력:'아무도 저를 기억해주지 않아요.', 재력:'밥이 먹고싶어요...', 스트레스:'이렇게 행복해도 되는걸까?'}
};
function pickExtremeEnding(s){
  const arr = [['체력',s.체력],['지능',s.지능],['매력',s.매력],['재력',s.재력],['스트레스',s.스트레스]]
              .filter(([k,v])=> v>=95 || v<=-95);
  if(!arr.length) return null;
  arr.sort((a,b)=> Math.abs(b[1]) - Math.abs(a[1]));
  const [key,val] = arr[0];
  return { title:`${key} 극단 엔딩`, desc: val>=95 ? EXTREME_TEXT.hi[key] : EXTREME_TEXT.lo[key], name:null };
}

const ENDING_TEXT = {
  '아이스본': { title:'아이스본 엔딩', desc:'좋은데요?' },
  '청혜령':   { title:'청혜령 엔딩',   desc:'한 잔은 떠나버린 너를 위하여 또 한 잔은 너와의 영원한 사랑을 위하여 그리고 또 한 잔은 이미 초라해진 나를 위하여...' },
  '에티캣':   { title:'에티캣 엔딩',   desc:'빵!' },
  '홍민택':   { title:'홍민택 엔딩',   desc:'으흐흐... 똥' },
  '진징구':   { title:'진징구 엔딩',   desc:'(담배 피러 감)' },
  '평범':     { title:'평범 엔딩',     desc:'평범한 슬라임. 다음엔 다른 선택을 해보자!' }
};
function pickNormalEnding(s){
  const list = [];
  if(s.지능>=30 && s.매력>=20 && s.재력>=25 && s.체력>=15 && s.스트레스<=-20) list.push('아이스본');
  if(s.체력>=35 && s.재력>=20 && s.지능>=10 && s.스트레스<=0) list.push('청혜령');
  if(s.체력>=10 && s.지능>=10 && s.재력<=0 && s.스트레스<=5) list.push('에티캣');
  if(s.재력>=20 && s.지능>=20 && s.스트레스>=15) list.push('홍민택');
  if(s.재력>=15 && s.매력>=10 && s.지능<=-10 && s.체력<=-20) list.push('진징구');
  if(!list.length) return {name:'평범', ...ENDING_TEXT['평범']};
  const name = list.length===1 ? list[0] : list[Math.floor(Math.random()*list.length)];
  return {name, ...ENDING_TEXT[name]};
}

/* =========================
   진행 (이벤트 → 다음날 → 힌트/엔딩)
========================= */
function advanceDay(){
  day++;
  renderBars();

  // Day 26 진입(5일 남음) → 힌트
  if(day===26){
    const hintKey = guessEnding(stats) || '평범';
    const p = document.createElement('p');
    p.textContent = `힌트: ${HINT_TEXT[hintKey]}`;
    logEl.appendChild(p);
  }

  // 새 하루 스냅샷
  markDayStart();

  // (수정) 엔딩 처리: 이미지 로딩 후 모달 오픈
  if (day > 30) {
    let title = '엔딩', desc = '', imgKey = '기본';

    const ex = pickExtremeEnding(stats);
    if (ex) {
      title = ex.title; desc = ex.desc; imgKey = '기본'; // 극단치는 기본이미지
    } else {
      const res = pickNormalEnding(stats); // {name, title, desc}
      title = res.title; desc = res.desc;
      imgKey = (res.name && SLIME_IMG[res.name]) ? res.name : '기본';
    }

    endingTitle.textContent = title;
    endingDesc.textContent  = desc;
    endingImg.style.display = 'block';
    endingImg.alt = (imgKey === '기본' ? '기본' : imgKey) + ' 엔딩';

    // 이전 src 잔상 방지 + 로딩 이벤트로 모달 열기
    endingImg.removeAttribute('src');
    endingImg.onload  = () => { endingModal.classList.add('active'); };
    endingImg.onerror = () => { endingModal.classList.add('active'); };
    endingImg.src = SLIME_IMG[imgKey];

    return;
  }
}

function tryNextDay(){
  if(actionsTaken<3){ alert('하루에 3번 행동해야 합니다!'); return; }
  applyDayChanges();

  const ev = maybePickEvent();
  if(ev){
    openEvent(ev, advanceDay);
  }else{
    advanceDay();
  }
}

/* 모달 버튼 */
closeEnding.addEventListener('click', ()=> endingModal.classList.remove('active'));
restartAllFromEnding.addEventListener('click', ()=>{ endingModal.classList.remove('active'); resetAll(); });

/* 컨트롤 */
nextBtn.addEventListener('click', tryNextDay);
resetAllBtn.addEventListener('click', resetAll);  // 처음부터 (완전 초기화)
resetDayBtn.addEventListener('click', resetDay);  // 다시하기 (하루 리셋)

/* 시작 */
resetAll();
</script>
</body>
</html>
